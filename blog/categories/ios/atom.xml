<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | My Octopress Blog]]></title>
  <link href="http://halolee.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://halolee.github.io/"/>
  <updated>2013-11-20T22:25:56+11:00</updated>
  <id>http://halolee.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascrip ios bridge]]></title>
    <link href="http://halolee.github.io/blog/2013/11/20/javascrip-ios-bridge/"/>
    <updated>2013-11-20T19:46:00+11:00</updated>
    <id>http://halolee.github.io/blog/2013/11/20/javascrip-ios-bridge</id>
    <content type="html"><![CDATA[<h1>Background</h1>

<p>For the most of the time, the UIWebview in iOS native code act as a browser and handle the communication of webpage.</p>

<p>In order for a deep level communcate between a webpage and iOS native application, i.e. to invoke iOS native functionality by javascript function, then we need to build a javascrip-iOS bridge.</p>

<p>Below is a simplified and minified iOS-JS bridge.</p>

<h1>Javascript</h1>

<h2>NativeBridge.js</h2>

<pre><code>var NativeBridge = {
  callbacksCount : 1,
  callbacks : {},

  call : function call(callbackId, callback) {

    NativeBridge.callbacks[callbackId] = callback;

    var iframe = document.createElement("IFRAME");
    iframe.setAttribute("src", "sp://claimID/" + callbackId);
    document.documentElement.appendChild(iframe);
    iframe.parentNode.removeChild(iframe);
    iframe = null;

    }

};
</code></pre>

<p>This is the essential part. By calling this script, the webpage can call back on the function on the iOS side.</p>

<h2>Webview-script.js</h2>

<pre><code>function passBackClaimId(claimID){

    NativeBridge.call(12341234123123, function () {});

};
</code></pre>

<p>It only contain a function call to initiate the function defined in the nativeBridge.js.</p>

<h2>webview-document.html</h2>

<pre><code>&lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;Webview document&lt;/title&gt;
          &lt;script type="text/javascript" src="NativeBridge.js"&gt;&lt;/script&gt;
          &lt;script type="text/javascript" src="webview-script.js"&gt;&lt;/script&gt;
    &lt;/head&gt;

    &lt;body&gt;
      &lt;h4&gt;UIWebView HTML document&lt;/h4&gt;

        &lt;form&gt;
          &lt;input type=button value="Submit" onClick= passBackClaimId() &gt;
          &lt;input type=button value="Show query" onClick="alert('Query string: '+self.location.search)"&gt;

      &lt;/form&gt;
    &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p>By clicking on the Submit button, it will invoke the javascript-iOS call to pass the claimID back to iOS application.</p>

<p>Another button is designed to catch the parameter passed in. That part is still under construction. Current function is if the web page is accessed through a query string. i.e. compare the following url</p>

<pre><code>http://localhost:8888/webview-document.html
http://localhost:8888/webview-document.html?itemName=LEDTV&amp;itemPrice=3000
</code></pre>

<p>We can see that the lower url string have a query string attached at the back of the base url.</p>

<p>and the query string is</p>

<pre><code>?itemName=LEDTV&amp;itemPrice=3000
</code></pre>

<p>which is normally the part we parse the parameter into the webpage.</p>

<h2>iOS</h2>

<pre><code>- (id)initWithFrame:(CGRect)frame 
    {
      if (self = [super initWithFrame:frame]) {

        // Set delegate in order to "shouldStartLoadWithRequest" to be called
        self.delegate = self;

        // Set non-opaque in order to make "body{background-color:transparent}" working!
        self.opaque = NO;

        // Instanciate JSON parser library
        json = [ SBJSON new ];

        // load our html file
        NSString *path = [[NSBundle mainBundle] pathForResource:@"webview-document" ofType:@"html"];
        [self loadRequest:[NSURLRequest requestWithURL:[NSURL fileURLWithPath:path]]];

    //      NSString *urlString = [[NSString alloc] initWithFormat:@"http://localhost:8888/webview-document.html?itemName=%@&amp;purchasePrice=%@",@"SamsumTV",@"4000"];
    //      [self loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:urlString]]];
      }
      return self;
    }


    // This selector is called when something is loaded in our webview
    // By something I don't mean anything but just "some" :
    //  - main html document
    //  - sub iframes document
    //
    // But all images, xmlhttprequest, css, ... files/requests doesn't generate such events :/
    - (BOOL)webView:(UIWebView *)webView2 
              shouldStartLoadWithRequest:(NSURLRequest *)request 
              navigationType:(UIWebViewNavigationType)navigationType {

        NSString *requestString = [[request URL] absoluteString];

      NSLog(@"request : %@",requestString);

      if ([requestString hasPrefix:@"sp://claimID/"]) {

        NSArray *components = [requestString componentsSeparatedByString:@"sp://claimID/"];

          NSString* callbackId = (NSString*)[components objectAtIndex:1] ;

          [self saveClaimID:callbackId];

        return NO;
      }

      return YES;
    }

    - (void)saveClaimID:(NSString *)claimID{
        NSLog(@"\n\n\nClaimID is %@\n\n\n",claimID);
    }
</code></pre>

<p>And need to setup webview delegate in the .h file</p>

<pre><code>@interface MyWebView : UIWebView &lt;UIWebViewDelegate&gt; 
</code></pre>

<p>That&rsquo;s pretty much about it. For a complete and more robust version, please find the guys in the reference.</p>

<h2>Reference</h2>

<p>For source code architecture and the concept of javascript-iOS bridge, credit goes to this guy
<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">https://github.com/marcuswestin/WebViewJavascriptBridge</a></p>

<p>for the web form button, credit goes to this guy
<a href="http://www.javascripter.net/faq/querystr.htm">http://www.javascripter.net/faq/querystr.htm</a></p>
]]></content>
  </entry>
  
</feed>
